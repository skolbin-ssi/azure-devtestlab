{
  "$schema": "https://raw.githubusercontent.com/Azure/azure-devtestlab/master/schemas/2016-11-28/dtlArtifacts.json",
  "title": "Execute PowerShell Script",
  "description": "Executes a PowerShell script with extensive logging.",
  "tags": [
    "Windows",
    "PowerShell"
  ],
  "iconUri": "https://code.benco.io/icon-collection/azure-patterns/script-file.svg",
  "targetOsType": "Windows",
  "parameters": {
    "ScriptPath": {
      "type": "string",
      "displayName": "Script Path",
      "description": "Path of the script to execute. Must be absolute or relative to the working directory."
    },
    "ScriptParameters": {
      "type": "securestring",
      "displayName": "Script Parameters",
      "description": "Parameters to pass into the PowerShell script. Either ordinal parameters or named parameters. To pass in secrets, use ConvertTo-SecureString (e.g. \"-bar (ConvertTo-SecureString 'MySecret' -AsPlainText -Force)\").",
      "defaultValue": ""
    },
    "EnvironmentVariables": {
      "type": "string",
      "displayName": "Environment Variables",
      "description": "Hash table of key value pairs that should be assigned to environment variables during script execution (e.g. \"@{ Foo = \"Bar\"; Fob = \"Baz\" }\").",
      "defaultValue": "@{}"
    },
    "LogsDirectory": {
      "type": "string",
      "displayName": "Logs Directory",
      "description": "The path of the directory where logs generated by this artifact will be written to.",
      "defaultValue": "%SYSTEMDRIVE%\\Logs"
    },
    "LogsDropServiceURL": {
      "type": "string",
      "displayName": "Logs Drop Service URL",
      "description": "The URL of the drop service to publish the log to (e.g. https://artifacts.dev.azure.com/contoso)",
      "defaultValue": ""
    },
    "LogsDropName": {
      "type": "string",
      "displayName": "Logs Drop Name",
      "description": "The name of the Azure Artifacts Drop where logs generated by this script will be uploaded to.",
      "defaultValue": ""
    },
    "LogsDropFilesToInclude": {
      "type": "string",
      "displayName": "Files to Upload to Logs Drop",
      "description": "File globs relative to the root directory and separated by ';' that specify files to upload to the logs drop at the end of artifact execution.",
      "defaultValue": ""
    },
    "LogsDropFilesToExclude": {
      "type": "string",
      "displayName": "Files to Exclude Upload to Logs Drop",
      "description": "File globs relative to the root directory and separated by ';' that specify files to exclude upload to the logs drop at the end of artifact execution.",
      "defaultValue": ""
    },
    "LogsDropServiceAccessToken": {
      "type": "securestring",
      "displayName": "Azure Artifacts Logs Drops Access Token",
      "description": "OAuth or personal access token for uploading logs to an Azure Artifacts Drop in the LogsDropServiceURL account (required scope: vso.drop_write).",
      "defaultValue": ""
    },
    "LogsDropServiceManagedIdentityClientID": {
      "type": "string",
      "displayName": "Azure Artifacts Logs Drop Azure Managed Identity Client ID",
      "description": "The client ID of an Azure managed identity (registered as a valid Azure DevOps user) that has an access to Azure Artifacts Logs Drop.",
      "defaultValue": ""
    },
    "IgnorePendingReboot": {
      "type": "string",
      "displayName": "Ignore Pending Reboot",
      "description": "Whether to ignore pending reboots from previous artifacts.",
      "defaultValue": "false"
    }
  },
  "runCommand": {
    "commandToExecute": "[concat('powershell.exe -ExecutionPolicy bypass \"& ./ExecutePowerShellScript.ps1 -ScriptPath ([Environment]::ExpandEnvironmentVariables(''', parameters('ScriptPath'), ''')) -ScriptParameters ''', replace(replace(parameters('ScriptParameters'), '''', ''''''), '\"', '\\\"'), ''' -EnvironmentVariables ', parameters('EnvironmentVariables'), ' -LogsDirectory ([Environment]::ExpandEnvironmentVariables(''', parameters('LogsDirectory'), '''))', if(equals(parameters('LogsDropServiceURL'), ''), '', concat(' -LogsDropServiceURL ''', parameters('LogsDropServiceURL'), '''')), if(equals(parameters('LogsDropName'), ''), '', concat(' -LogsDropName ''', parameters('LogsDropName'), '''')), if(equals(parameters('LogsDropFilesToInclude'), ''), '', concat(' -LogsDropFilesToInclude ''', parameters('LogsDropFilesToInclude'), '''')), if(equals(parameters('LogsDropFilesToExclude'), ''), '', concat(' -LogsDropFilesToExclude ''', parameters('LogsDropFilesToExclude'), '''')), if(equals(parameters('LogsDropServiceAccessToken'), ''), '', concat(' -LogsDropServiceAccessToken (ConvertTo-SecureString ''', parameters('LogsDropServiceAccessToken'), ''' -AsPlainText -Force)')), if(equals(parameters('LogsDropServiceManagedIdentityClientID'), ''), '', concat(' -LogsDropServiceManagedIdentityClientID ''', parameters('LogsDropServiceManagedIdentityClientID'), '''')), ' -IgnorePendingReboot:$', parameters('IgnorePendingReboot'), '\"')]"
  }
}